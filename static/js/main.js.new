// DOM Elements
const elements = {
    // Navigation
    navbar: document.querySelector('.navbar'),
    
    // Search functionality
    searchBtn: document.getElementById('search-btn'),
    searchContainer: document.querySelector('.search-container'),
    closeSearch: document.querySelector('.close-search'),
    movieSearchInput: document.getElementById('main-search'),
    searchTermEl: document.querySelector('.search-term'),
    suggestionItem: document.querySelector('.suggestion-item'),
    
    // Recommendation modal
    recommendModal: document.getElementById('recommendation-modal'),
    closeModal: document.querySelector('.close-modal'),
    useCurrentMovieLink: document.querySelector('.use-current-movie'),
    
    // Hero slider
    heroSlides: document.querySelectorAll('.hero-slide'),
    
    // Carousel
    carousel: document.querySelector('.carousel'),
    carouselItems: document.querySelectorAll('.carousel-item')
};

// State
let currentSlide = 0;

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Initialize AOS if available
    if (typeof AOS !== 'undefined') {
        AOS.init({
            duration: 800,
            once: true,
            easing: 'ease-in-out',
            offset: 100
        });
    }

    // Initialize hero slider
    if (elements.heroSlides.length > 0) {
        elements.heroSlides[0].classList.add('active');
        setInterval(nextSlide, 5000);
    }

    // Initialize navbar scroll effect
    window.addEventListener('scroll', handleScroll);
    
    // Initialize search functionality
    initSearch();
    
    // Initialize recommendation modal
    initRecommendationModal();
    
    // Initialize carousel if it exists
    if (elements.carousel) {
        initCarousel();
    }
    
    // Initialize tooltips
    initTooltips();
    
    // Initialize smooth scrolling
    initSmoothScrolling();
});

// Hero Slider Functions
function nextSlide() {
    if (elements.heroSlides.length === 0) return;
    
    elements.heroSlides[currentSlide].classList.remove('active');
    currentSlide = (currentSlide + 1) % elements.heroSlides.length;
    elements.heroSlides[currentSlide].classList.add('active');
}

// Navbar Scroll Effect
function handleScroll() {
    if (!elements.navbar) return;
    
    if (window.scrollY > 50) {
        elements.navbar.classList.add('scrolled');
    } else {
        elements.navbar.classList.remove('scrolled');
    }
}

// Search Functionality
function initSearch() {
    if (!elements.searchBtn || !elements.searchContainer) return;
    
    // Toggle search container
    const toggleSearch = (show = true) => {
        if (show) {
            elements.searchContainer.classList.add('active');
            document.body.style.overflow = 'hidden';
            if (elements.movieSearchInput) elements.movieSearchInput.focus();
        } else {
            elements.searchContainer.classList.remove('active');
            document.body.style.overflow = '';
            if (elements.movieSearchInput) elements.movieSearchInput.value = '';
            if (elements.searchTermEl) elements.searchTermEl.textContent = '';
        }
    };

    // Open search when search button is clicked
    elements.searchBtn.addEventListener('click', () => toggleSearch(true));

    // Close search when clicking outside
    elements.searchContainer.addEventListener('click', (e) => {
        if (e.target === elements.searchContainer) {
            toggleSearch(false);
        }
    });

    // Close search with escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && elements.searchContainer.classList.contains('active')) {
            toggleSearch(false);
        }
    });

    // Handle search input
    if (elements.movieSearchInput && elements.searchTermEl) {
        elements.movieSearchInput.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            elements.searchTermEl.textContent = query;
        });

        // Handle Enter key in search
        elements.movieSearchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const query = elements.movieSearchInput.value.trim();
                if (query) {
                    toggleSearch(false);
                    getRecommendations(query);
                }
            }
        });
    }

    // Handle recommendation suggestion
    if (elements.suggestionItem && elements.movieSearchInput) {
        elements.suggestionItem.addEventListener('click', () => {
            const query = elements.movieSearchInput.value.trim();
            if (query) {
                toggleSearch(false);
                getRecommendations(query);
            }
        });
    }

    // Close search button
    if (elements.closeSearch) {
        elements.closeSearch.addEventListener('click', () => toggleSearch(false));
    }
}

// Recommendation Modal
function initRecommendationModal() {
    if (!elements.recommendModal || !elements.closeModal) return;
    
    // Close modal when clicking the close button
    elements.closeModal.addEventListener('click', () => {
        elements.recommendModal.classList.remove('active');
        document.body.style.overflow = '';
    });

    // Close modal when clicking outside
    elements.recommendModal.addEventListener('click', (e) => {
        if (e.target === elements.recommendModal) {
            elements.recommendModal.classList.remove('active');
            document.body.style.overflow = '';
        }
    });

    // Use current movie link if it exists
    if (elements.useCurrentMovieLink) {
        elements.useCurrentMovieLink.addEventListener('click', (e) => {
            e.preventDefault();
            const movieTitle = document.querySelector('.movie-detail h1')?.textContent.trim();
            if (movieTitle) {
                getRecommendations(movieTitle);
            }
        });
    }
}

// Get Recommendations
function getRecommendations(movieTitle = '') {
    const loadingEl = document.getElementById('recommendation-loading');
    const resultsEl = document.getElementById('recommendation-results');
    const errorEl = document.getElementById('recommendation-error');
    const titleEl = document.getElementById('recommendation-title');

    // Validate DOM elements
    if (!loadingEl || !resultsEl || !errorEl || !titleEl) {
        console.error('Missing required DOM elements for recommendations');
        return;
    }

    // Show loading state
    loadingEl.style.display = 'block';
    resultsEl.style.display = 'none';
    errorEl.style.display = 'none';

    // If no title is provided, try to get it from the current page
    if (!movieTitle) {
        const movieTitleEl = document.querySelector('.movie-detail h1');
        if (movieTitleEl) {
            movieTitle = movieTitleEl.textContent.trim();
        }
    }

    // Update modal title
    titleEl.textContent = movieTitle ? `Recommendations for "${movieTitle}"` : 'Movie Recommendations';

    // Show the modal if it's not already visible
    if (elements.recommendModal) {
        elements.recommendModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    // Make the API request
    fetch(`/recommend?movie_title=${encodeURIComponent(movieTitle)}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            // Hide loading state
            loadingEl.style.display = 'none';

            if (data.error) {
                // Show error message
                errorEl.textContent = data.error;
                errorEl.style.display = 'block';
                return;
            }
            
            // Display results
            if (data.recommendations && data.recommendations.length > 0) {
                resultsEl.innerHTML = `
                    <div class="recommendation-grid">
                        ${data.recommendations.map(movie => `
                            <div class="recommendation-item" data-movie-id="${movie.id}">
                                <div class="recommendation-poster">
                                    ${movie.poster_path 
                                        ? `<img src="https://image.tmdb.org/t/p/w200${movie.poster_path}" alt="${movie.title}">`
                                        : '<div class="no-poster">No poster available</div>'
                                    }
                                </div>
                                <div class="recommendation-info">
                                    <h3>${movie.title}</h3>
                                    ${movie.release_date ? `<p>${new Date(movie.release_date).getFullYear()}</p>` : ''}
                                    ${movie.vote_average ? `<p>â˜… ${movie.vote_average.toFixed(1)}</p>` : ''}
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
            } else {
                resultsEl.innerHTML = '<p>No recommendations found. Try a different movie.</p>';
            }
            resultsEl.style.display = 'block';
        })
        .catch(error => {
            console.error('Error fetching recommendations:', error);
            // Hide loading state
            loadingEl.style.display = 'none';
            // Show error message
            errorEl.textContent = error.message || 'Failed to load recommendations. Please try again later.';
            errorEl.style.display = 'block';
        });
}

    // If no title is provided, try to get it from the current page
    if (!movieTitle) {
        const movieTitleEl = document.querySelector('.movie-detail h1');
        if (movieTitleEl) {
            movieTitle = movieTitleEl.textContent.trim();
        }
    }

    // Update modal title
    if (titleEl) {
        titleEl.textContent = movieTitle ? `Recommendations for "${movieTitle}"` : 'Movie Recommendations';
    }

    // Show the modal if it's not already visible
    if (elements.recommendModal) {
        elements.recommendModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    // Make the API request
    fetch(`/recommend?movie_title=${encodeURIComponent(movieTitle)}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Hide loading state
            if (loadingEl) loadingEl.style.display = 'none';

            if (data.error) {
                // Show error message
                if (errorEl) {
                    errorEl.textContent = data.error;
                    errorEl.style.display = 'block';
                }
                return;
            }
            
            // Display results
            if (resultsEl) {
                if (data.recommendations && data.recommendations.length > 0) {
                    resultsEl.innerHTML = `
                        <div class="recommendation-grid">
                            ${data.recommendations.map(movie => `
                                <div class="recommendation-item" data-movie-id="${movie.id}">
                                    <div class="recommendation-poster">
                                        ${movie.poster_path 
                                            ? `<img src="https://image.tmdb.org/t/p/w200${movie.poster_path}" alt="${movie.title}">`
                                            : '<div class="no-poster">No poster available</div>'
                                        }
                                    </div>
                                    <div class="recommendation-info">
                                        <h3>${movie.title}</h3>
                                        ${movie.release_date ? `<p>${new Date(movie.release_date).getFullYear()}</p>` : ''}
                                        ${movie.vote_average ? `<p>â˜… ${movie.vote_average.toFixed(1)}</p>` : ''}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                } else {
                    resultsEl.innerHTML = '<p>No recommendations found. Try a different movie.</p>';
                }
                resultsEl.style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Error fetching recommendations:', error);
            // Hide loading state
            if (loadingEl) loadingEl.style.display = 'none';
            // Show error message
            if (errorEl) {
                errorEl.textContent = 'Failed to load recommendations. Please try again later.';
                errorEl.style.display = 'block';
            }
        });
}

// Carousel Functionality
function initCarousel() {
    if (!elements.carousel || elements.carouselItems.length === 0) return;
    
    const itemWidth = elements.carouselItems[0].offsetWidth;
    const prevBtn = document.querySelector('.carousel-prev');
    const nextBtn = document.querySelector('.carousel-next');
    let currentIndex = 0;
    
    function updateButtons() {
        if (!prevBtn || !nextBtn) return;
        
        prevBtn.style.display = currentIndex === 0 ? 'none' : 'flex';
        nextBtn.style.display = currentIndex >= elements.carouselItems.length - 4 ? 'none' : 'flex';
    }
    
    function scrollToItem(index) {
        if (index < 0 || index >= elements.carouselItems.length) return;
        
        currentIndex = index;
        elements.carousel.scrollTo({
            left: index * (itemWidth + 16), // 16px for gap
            behavior: 'smooth'
        });
        
        updateButtons();
    }
    
    if (prevBtn && nextBtn) {
        prevBtn.addEventListener('click', () => scrollToItem(Math.max(0, currentIndex - 1)));
        nextBtn.addEventListener('click', () => scrollToItem(Math.min(elements.carouselItems.length - 1, currentIndex + 1)));
    }
    
    // Update buttons on scroll
    elements.carousel.addEventListener('scroll', () => {
        const scrollPosition = elements.carousel.scrollLeft;
        currentIndex = Math.round(scrollPosition / (itemWidth + 16));
        updateButtons();
    });
    
    // Initial button state
    updateButtons();
}

// Tooltips
function initTooltips() {
    const tooltipElements = document.querySelectorAll('[data-tooltip]');
    
    tooltipElements.forEach(element => {
        const tooltipText = element.getAttribute('data-tooltip');
        if (!tooltipText) return;
        
        const tooltip = document.createElement('div');
        tooltip.className = 'tooltip';
        tooltip.textContent = tooltipText;
        document.body.appendChild(tooltip);
        
        const positionTooltip = () => {
            const rect = element.getBoundingClientRect();
            tooltip.style.top = `${rect.top - tooltip.offsetHeight - 8}px`;
            tooltip.style.left = `${rect.left + (element.offsetWidth - tooltip.offsetWidth) / 2}px`;
        };
        
        element.addEventListener('mouseenter', () => {
            tooltip.classList.add('active');
            positionTooltip();
        });
        
        element.addEventListener('mouseleave', () => {
            tooltip.classList.remove('active');
        });
        
        window.addEventListener('resize', positionTooltip);
    });
}

// Smooth Scrolling
function initSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
                targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}
